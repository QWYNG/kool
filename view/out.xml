<T>
  <threads>
    <thread>
      <k>
        create ( Main ) ~> storeObj ~> Main ( .Vals ) ; return this ; ~> .K
      </k>
      <control>
        <fstack>
          ListItem ( fstackFrame ( .Map , #freezer_;_KOOL-SYNTAX_Stmt_Exp0_ ( ) ~> .K , .List , <crntObj>
            <crntClass>
              Object
            </crntClass>
            <envStack>
              .List
            </envStack>
            .LocationCell
          </crntObj> ~> .K ) )
        </fstack>
        <xstack>
          .List
        </xstack>
        <crntObj>
          <crntClass>
            Object
          </crntClass>
          <envStack>
            ListItem ( envStackFrame ( Object , .Map ) )
          </envStack>
          <location>
            0 ~> .K
          </location>
        </crntObj>
      </control>
      <env>
        .Map
      </env>
      <holds>
        .Map
      </holds>
      <id>
        0
      </id>
    </thread>
  </threads>
  <store>
    .Map
  </store>
  <busy>
    .Set
  </busy>
  <terminated>
    .Set
  </terminated>
  <input>
    .List
  </input>
  <output>
    .List
  </output>
  <nextLoc>
    1
  </nextLoc>
  <classes>
    <classData>
      <className>
        Main
      </className>
      <baseClass>
        Object
      </baseClass>
      <declarations>
        method Main ( .Ids ) { var x = 0 , .Vals ; x = x + 1 ; print ( x , .Vals ) ; } ~> .K
      </declarations>
    </classData>
  </classes>
</T>
